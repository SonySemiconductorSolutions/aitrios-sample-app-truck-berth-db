# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class PerceptionResult(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PerceptionResult()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPerceptionResult(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # PerceptionResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PerceptionResult
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from modules.cloudapp.SmartCamera.Image import Image

            obj = Image()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PerceptionResult
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PerceptionResult
    def SlotList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from modules.cloudapp.SmartCamera.SlotResult import SlotResult

            obj = SlotResult()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PerceptionResult
    def SlotListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PerceptionResult
    def SlotListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0


def PerceptionResultStart(builder):
    builder.StartObject(3)


def Start(builder):
    return PerceptionResultStart(builder)


def PerceptionResultAddImage(builder, image):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)


def AddImage(builder, image):
    return PerceptionResultAddImage(builder, image)


def PerceptionResultAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)


def AddType(builder, type):
    return PerceptionResultAddType(builder, type)


def PerceptionResultAddSlotList(builder, slotList):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(slotList), 0
    )


def AddSlotList(builder, slotList):
    return PerceptionResultAddSlotList(builder, slotList)


def PerceptionResultStartSlotListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartSlotListVector(builder, numElems):
    return PerceptionResultStartSlotListVector(builder, numElems)


def PerceptionResultEnd(builder):
    return builder.EndObject()


def End(builder):
    return PerceptionResultEnd(builder)

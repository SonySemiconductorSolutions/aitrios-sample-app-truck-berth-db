# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class CarLicensePlate(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CarLicensePlate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCarLicensePlate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # CarLicensePlate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CarLicensePlate
    def BoundingBoxType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CarLicensePlate
    def BoundingBox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table

            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # CarLicensePlate
    def BoundingBoxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CarLicensePlate
    def PlatePoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from modules.cloudapp.SmartCamera.CarLicensePlatePoints import CarLicensePlatePoints

            obj = CarLicensePlatePoints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CarLicensePlate
    def PlateText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from modules.cloudapp.SmartCamera.PlateTextResult import PlateTextResult

            obj = PlateTextResult()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CarLicensePlate
    def PlateTextScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0


def CarLicensePlateStart(builder):
    builder.StartObject(6)


def Start(builder):
    return CarLicensePlateStart(builder)


def CarLicensePlateAddBoundingBoxType(builder, boundingBoxType):
    builder.PrependUint8Slot(0, boundingBoxType, 0)


def AddBoundingBoxType(builder, boundingBoxType):
    return CarLicensePlateAddBoundingBoxType(builder, boundingBoxType)


def CarLicensePlateAddBoundingBox(builder, boundingBox):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(boundingBox), 0
    )


def AddBoundingBox(builder, boundingBox):
    return CarLicensePlateAddBoundingBox(builder, boundingBox)


def CarLicensePlateAddBoundingBoxScore(builder, boundingBoxScore):
    builder.PrependFloat32Slot(2, boundingBoxScore, 0.0)


def AddBoundingBoxScore(builder, boundingBoxScore):
    return CarLicensePlateAddBoundingBoxScore(builder, boundingBoxScore)


def CarLicensePlateAddPlatePoints(builder, platePoints):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(platePoints), 0
    )


def AddPlatePoints(builder, platePoints):
    return CarLicensePlateAddPlatePoints(builder, platePoints)


def CarLicensePlateAddPlateText(builder, plateText):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(plateText), 0
    )


def AddPlateText(builder, plateText):
    return CarLicensePlateAddPlateText(builder, plateText)


def CarLicensePlateAddPlateTextScore(builder, plateTextScore):
    builder.PrependFloat32Slot(5, plateTextScore, 0.0)


def AddPlateTextScore(builder, plateTextScore):
    return CarLicensePlateAddPlateTextScore(builder, plateTextScore)


def CarLicensePlateEnd(builder):
    return builder.EndObject()


def End(builder):
    return CarLicensePlateEnd(builder)

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class CarLicensePlatePoints(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CarLicensePlatePoints()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCarLicensePlatePoints(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # CarLicensePlatePoints
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CarLicensePlatePoints
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CarLicensePlatePoints
    def PointList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from modules.cloudapp.SmartCamera.PlatePoint import PlatePoint

            obj = PlatePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CarLicensePlatePoints
    def PointListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CarLicensePlatePoints
    def PointListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def CarLicensePlatePointsStart(builder):
    builder.StartObject(2)


def Start(builder):
    return CarLicensePlatePointsStart(builder)


def CarLicensePlatePointsAddScore(builder, score):
    builder.PrependFloat32Slot(0, score, 0.0)


def AddScore(builder, score):
    return CarLicensePlatePointsAddScore(builder, score)


def CarLicensePlatePointsAddPointList(builder, pointList):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(pointList), 0
    )


def AddPointList(builder, pointList):
    return CarLicensePlatePointsAddPointList(builder, pointList)


def CarLicensePlatePointsStartPointListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartPointListVector(builder, numElems):
    return CarLicensePlatePointsStartPointListVector(builder, numElems)


def CarLicensePlatePointsEnd(builder):
    return builder.EndObject()


def End(builder):
    return CarLicensePlatePointsEnd(builder)

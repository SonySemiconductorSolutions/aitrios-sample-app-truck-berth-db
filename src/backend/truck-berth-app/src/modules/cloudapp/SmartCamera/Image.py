# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Image(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Image()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Image
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # Image
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Image
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Image
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Image
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Image
    def PixelFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Image
    def CameraId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0


def ImageStart(builder):
    builder.StartObject(7)


def Start(builder):
    return ImageStart(builder)


def ImageAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)


def AddData(builder, data):
    return ImageAddData(builder, data)


def ImageStartDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def StartDataVector(builder, numElems):
    return ImageStartDataVector(builder, numElems)


def ImageAddWidth(builder, width):
    builder.PrependUint32Slot(1, width, 0)


def AddWidth(builder, width):
    return ImageAddWidth(builder, width)


def ImageAddHeight(builder, height):
    builder.PrependUint32Slot(2, height, 0)


def AddHeight(builder, height):
    return ImageAddHeight(builder, height)


def ImageAddChannel(builder, channel):
    builder.PrependUint32Slot(3, channel, 0)


def AddChannel(builder, channel):
    return ImageAddChannel(builder, channel)


def ImageAddPixelFormat(builder, pixelFormat):
    builder.PrependInt8Slot(4, pixelFormat, 0)


def AddPixelFormat(builder, pixelFormat):
    return ImageAddPixelFormat(builder, pixelFormat)


def ImageAddCameraId(builder, cameraId):
    builder.PrependUint32Slot(5, cameraId, 0)


def AddCameraId(builder, cameraId):
    return ImageAddCameraId(builder, cameraId)


def ImageAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(6, timestamp, 0)


def AddTimestamp(builder, timestamp):
    return ImageAddTimestamp(builder, timestamp)


def ImageEnd(builder):
    return builder.EndObject()


def End(builder):
    return ImageEnd(builder)

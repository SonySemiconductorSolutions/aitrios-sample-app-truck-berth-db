# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class PlatePoint(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlatePoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlatePoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # PlatePoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlatePoint
    def PointScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlatePoint
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from modules.cloudapp.SmartCamera.Point2d import Point2d

            obj = Point2d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def PlatePointStart(builder):
    builder.StartObject(2)


def Start(builder):
    return PlatePointStart(builder)


def PlatePointAddPointScore(builder, pointScore):
    builder.PrependFloat32Slot(0, pointScore, 0.0)


def AddPointScore(builder, pointScore):
    return PlatePointAddPointScore(builder, pointScore)


def PlatePointAddPoint(builder, point):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0)


def AddPoint(builder, point):
    return PlatePointAddPoint(builder, point)


def PlatePointEnd(builder):
    return builder.EndObject()


def End(builder):
    return PlatePointEnd(builder)

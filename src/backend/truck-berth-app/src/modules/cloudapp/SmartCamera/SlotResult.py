# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class SlotResult(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlotResult()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlotResult(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # SlotResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlotResult
    def CameraId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SlotResult
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SlotResult
    def IsVacancy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlotResult
    def Car(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from modules.cloudapp.SmartCamera.CarObject import CarObject

            obj = CarObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def SlotResultStart(builder):
    builder.StartObject(4)


def Start(builder):
    return SlotResultStart(builder)


def SlotResultAddCameraId(builder, cameraId):
    builder.PrependUint32Slot(0, cameraId, 0)


def AddCameraId(builder, cameraId):
    return SlotResultAddCameraId(builder, cameraId)


def SlotResultAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(1, timestamp, 0)


def AddTimestamp(builder, timestamp):
    return SlotResultAddTimestamp(builder, timestamp)


def SlotResultAddIsVacancy(builder, isVacancy):
    builder.PrependBoolSlot(2, isVacancy, 0)


def AddIsVacancy(builder, isVacancy):
    return SlotResultAddIsVacancy(builder, isVacancy)


def SlotResultAddCar(builder, car):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(car), 0)


def AddCar(builder, car):
    return SlotResultAddCar(builder, car)


def SlotResultEnd(builder):
    return builder.EndObject()


def End(builder):
    return SlotResultEnd(builder)
